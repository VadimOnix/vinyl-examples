// Generated by CodiumAI

import {ToDoService} from "@/domains/toDo/service/ToDoService";

describe('ToDoService', () => {

  // Can add a valid ToDo object to the repository
  it('should add a valid ToDo object to the repository', async () => {
    // Arrange
    const todo = {
      title: 'Test Todo',
      description: 'Test Description',
      completed: false
    };
    const mockResponse = {
      id: 1,
      title: 'Test Todo',
      description: 'Test Description',
      completed: false,
      userId: 1
    };
    const mockRepository = {
      addToDo: jest.fn().mockResolvedValue(mockResponse)
    };
    const toDoService = new ToDoService({}, {toDoRepository: mockRepository});

    // Act
    const result = await toDoService.addToDo(todo);

    // Assert
    expect(mockRepository.addToDo).toHaveBeenCalledWith(todo);
    expect(result).toEqual(mockResponse);
  });

  // Can get a list of ToDo objects from the repository
  it('should get a list of ToDo objects from the repository', async () => {
    // Arrange
    const mockResponse = [
      {
        id: 1,
        title: 'Test Todo 1',
        description: 'Test Description 1',
        completed: false,
        userId: 1
      },
      {
        id: 2,
        title: 'Test Todo 2',
        description: 'Test Description 2',
        completed: true,
        userId: 1
      }
    ];
    const mockRepository = {
      getToDos: jest.fn().mockResolvedValue(mockResponse)
    };
    const toDoService = new ToDoService({}, {toDoRepository: mockRepository});

    // Act
    const result = await toDoService.getToDos();

    // Assert
    expect(mockRepository.getToDos).toHaveBeenCalled();
    expect(result).toEqual(mockResponse);
  });

  // Throws an error when adding a ToDo object with missing properties
  it('should throw an error when adding a ToDo object with missing properties', async () => {
    // Arrange
    const todo = {
      title: 'Test Todo',
      completed: false
    };
    const toDoService = new ToDoService();

    // Act & Assert
    await expect(toDoService.addToDo(todo)).rejects.toThrow('Invalid todo object');
  });

  // Throws an error when the repository configuration is invalid
  it('should throw an error when the repository configuration is invalid', () => {
    // Arrange
    const invalidConfig = {
      toDoRepositoryConfiguration: {}
    };
    const toDoService = new ToDoService();

    // Act & Assert
    expect(() => toDoService.updateRepositoriesConfiguration(invalidConfig)).toThrow('Invalid configuration');
  });

  // Can update the configuration of the repository
  it('should update the configuration of the repository', () => {
    // Arrange
    const config = {
      toDoRepositoryConfiguration: {
        token: 'testToken',
        headers: {
          'Content-Type': 'application/json'
        }
      }
    };
    const mockRepository = {
      updateConfiguration: jest.fn()
    };
    const toDoService = new ToDoService({}, {toDoRepository: mockRepository});

    // Act
    toDoService.updateRepositoriesConfiguration(config);

    // Assert
    expect(mockRepository.updateConfiguration).toHaveBeenCalledWith(config.toDoRepositoryConfiguration);
  });

  // Throws an error when adding a ToDo object fails
  it('should throw an error when adding a ToDo object fails', async () => {
    // Arrange
    const todo = {
      title: 'Test Todo',
      description: 'Test Description',
      completed: false
    };
    const mockRepository = {
      addToDo: jest.fn().mockRejectedValue(new Error('Failed to add ToDo'))
    };
    const toDoService = new ToDoService({}, {toDoRepository: mockRepository});

    // Act & Assert
    await expect(toDoService.addToDo(todo)).rejects.toThrow('Failed to add ToDo');
  });

});
