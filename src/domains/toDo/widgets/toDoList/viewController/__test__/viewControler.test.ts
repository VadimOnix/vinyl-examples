// Generated by CodiumAI

import {ToDoListViewController} from "@/domains/toDo/widgets/toDoList/viewController/viewController";

describe('ToDoViewController', () => {

  // renders inputDescriptionValue, toDos and isFetching correctly
  it('should render inputDescriptionValue, toDos, and isFetching correctly', () => {
    const dataControllerMock = {
      isFetching: false,
      toDos: [],
    };
    const depsMock = {
      dataController: dataControllerMock,
    };
    const viewController = new ToDoListViewController(depsMock);

    expect(viewController.inputDescriptionValue).toBe('');
    expect(viewController.toDos).toEqual([]);
    expect(viewController.isFetching).toBe(false);
  });

  // sets inputDescriptionValue to empty string on clickOnCrossButton
  it('should set inputDescriptionValue to empty string on clickOnCrossButton', () => {
    const dataControllerMock = {};
    const depsMock = {
      dataController: dataControllerMock,
    };
    const viewController = new ToDoListViewController(depsMock);
    viewController.changeInputDescriptionValue('Test ToDo');

    viewController.clickOnResetButton();

    expect(viewController.inputDescriptionValue).toBe('');
  });

  // can get inputTitleValue
  it('should return the input title value', () => {
    const deps = {
      dataController: {
        isFetching: false,
        toDos: [],
        isAbleToDoList: true
      }
    };
    const viewController = new ToDoListViewController(deps);
    viewController.changeInputTitleValue('Test Title');
    expect(viewController.inputTitleValue).toBe('Test Title');
  });

  // can get inputDescriptionValue
  it('should return the input description value', () => {
    const deps = {
      dataController: {
        isFetching: false,
        toDos: [],
        isAbleToDoList: true
      }
    };
    const viewController = new ToDoListViewController(deps);
    viewController.changeInputDescriptionValue('Test Description');
    expect(viewController.inputDescriptionValue).toBe('Test Description');
  });

  // can get isFetching
  it('should return the fetching status', () => {
    const deps = {
      dataController: {
        isFetching: true,
        toDos: [],
        isAbleToDoList: true
      }
    };
    const viewController = new ToDoListViewController(deps);
    expect(viewController.isFetching).toBe(true);
  });

  // can handle empty inputTitleValue
  it('should handle empty input title value', () => {
    const deps = {
      dataController: {
        isFetching: false,
        toDos: [],
        isAbleToDoList: true
      }
    };
    const viewController = new ToDoListViewController(deps);
    viewController.changeInputTitleValue('');
    expect(viewController.inputTitleValue).toBe('');
  });

  // can handle empty inputDescriptionValue
  it('should handle empty input description value', () => {
    const deps = {
      dataController: {
        isFetching: false,
        toDos: [],
        isAbleToDoList: true
      }
    };
    const viewController = new ToDoListViewController(deps);
    viewController.changeInputDescriptionValue('');
    expect(viewController.inputDescriptionValue).toBe('');
  });
});

