// Generated by CodiumAI

import {ToDoListViewController} from "@/domains/toDo/widgets/toDoList/viewController/viewController";

describe('ToDoViewController', () => {

  // renders inputDescriptionValue, toDos and isFetching correctly
  it('should render inputDescriptionValue, toDos, and isFetching correctly', () => {
    const dataControllerMock = {
      isFetching: false,
      toDos: [],
    };
    const depsMock = {
      dataController: dataControllerMock,
    };
    const viewController = new ToDoListViewController(depsMock);

    expect(viewController.inputDescriptionValue).toBe('');
    expect(viewController.toDos).toEqual([]);
    expect(viewController.isFetching).toBe(false);
  });

  // calls addNewToDo with correct inputDescriptionValue on clickOnCheckButton
  it('should call addNewToDo with correct inputDescriptionValue on clickOnCheckButton', async () => {
    const dataControllerMock = {
      addNewToDo: jest.fn(),
    };
    const depsMock = {
      dataController: dataControllerMock,
    };
    const viewController = new ToDoListViewController(depsMock);
    viewController.changeInputDescriptionValue('Test description ToDo');
    viewController.changeInputTitleValue('Test ToDo');

    await viewController.clickOnCheckButton();

    expect(dataControllerMock.addNewToDo).toHaveBeenCalledWith({
      description: 'Test description ToDo',
      completed: false,
      title: 'Test ToDo',
    });
  });

  // sets inputDescriptionValue to empty string on clickOnCrossButton
  it('should set inputDescriptionValue to empty string on clickOnCrossButton', () => {
    const dataControllerMock = {};
    const depsMock = {
      dataController: dataControllerMock,
    };
    const viewController = new ToDoListViewController(depsMock);
    viewController.changeInputDescriptionValue('Test ToDo');

    viewController.clickOnResetButton();

    expect(viewController.inputDescriptionValue).toBe('');
  });

  // throws error if addNewToDo is called without authenticated user
  it('should throw error if addNewToDo is called without authenticated user', async () => {
    const dataControllerMock = {
      addNewToDo: jest.fn().mockImplementation(() => {
        throw new Error('User is not authenticated!');
      }),
    };
    const depsMock = {
      dataController: dataControllerMock,
    };
    const viewController = new ToDoListViewController(depsMock);
    viewController.changeInputDescriptionValue('Test ToDo');

    await expect(viewController.clickOnCheckButton()).rejects.toThrowError('User is not authenticated!');
  });

  // throws error if addNewToDo fails
  it('should throw error if addNewToDo fails', async () => {
    const dataControllerMock = {
      addNewToDo: jest.fn().mockImplementation(() => {
        throw new Error('Failed to add new ToDo');
      }),
    };
    const depsMock = {
      dataController: dataControllerMock,
    };
    const viewController = new ToDoListViewController(depsMock);
    viewController.changeInputDescriptionValue('Test ToDo');

    await expect(viewController.clickOnCheckButton()).rejects.toThrowError('Failed to add new ToDo');
  });

});
